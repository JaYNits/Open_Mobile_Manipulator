<?xml version="1.0" encoding="UTF-8"?>

<launch>

  <arg name="sim" default="false"/>
    <arg name="robot" default="ommp_real"/>

  <!-- send urdf to param server -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find ommp_description)/urdf/robots/$(arg robot)/$(arg robot).urdf.xacro' sim:=$(arg sim)" />
  
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  <!-- Send robot states to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="15.0" />
  </node>

  <!-- load controllers to param server-->
  <!--
  <rosparam file="$(find ommp_bringup)/config/control/joint_state_controller.yaml" command="load"/>
  <rosparam file="$(find ommp_bringup)/config/control/arm_control.yaml" command="load"/>
  <rosparam file="$(find ommp_bringup)/config/control/gripper_position_control.yaml" command="load"/>
  <rosparam file="$(find ommp_bringup)/config/control/kinect_control.yaml" command="load"/>
  <rosparam file="$(find ommp_bringup)/config/control/hardware_interface_settings.yaml" command="load"/>
  -->
  
  <!-- start controller manager -->
  <!--node name="controller_spawner_joint_state" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="joint_state_controller arm_controller gripper_controller kinect_controller"/-->

  <!-- start hardware interface for the arm -->
  <!--node name="my_arm_hardware_interface" pkg="my_hardware_interface" type="myrobot_hw_main"
          output="screen" launch-prefix=""/-->

  <!-- Transforms Joint_states to appropiate servo commmands for rosserial -->
  <!-- Arm is a clone of joint_States - perfect execution -->
  <!--node name="Pub_to_Arduino_Class" pkg="ommp_bringup" type="Pub_to_Arduino_Class" respawn="false" 
  output="screen"/-->
  <!--node name="PCA9685_driver" pkg="pwm_pca9685" type="pca9685_node" respawn="false" 
  output="screen"/-->



  <!-- Transforms cmd_vel to appropiate wheel velocity target for rosserial-pid -->
  <node name="Cmd_Vel_to_Arduino" pkg="ommp_bringup" type="Cmd_Vel_to_Arduino" respawn="false" 
  output="screen"/>







  <!-- Start the LIDAR driver -->
  <node name="ydlidar_node"  pkg="ydlidar"  type="ydlidar_node" output="screen" respawn="false" >
    <rosparam file="$(find ommp_bringup)/config/start/ydlidar_params.yaml" command="load" />
  </node>


  <!-- From encoders array values calculate odometry -->
  <node pkg="ommp_bringup" type="Diff_TF" name="Diff_TF" output="screen">
    <rosparam file="$(find ommp_bringup)/config/start/odom_encoder_params.yaml" command="load" />
  </node>
  
  <!-- Start rosserial Arduino node -->
  <node name="serial_node" pkg="rosserial_python" type="serial_node.py" output="screen">
      <rosparam file="$(find ommp_bringup)/config/start/serial_params.yaml" command="load" />
  </node>

  <!-- camera relay-->
  <!--node name="Camera_Relay" pkg="ommp_bringup" type="Camera_Relay" respawn="false" 
  output="screen"/-->
  <!-- Kinect motors pitch -->
  <!--node name="Kinect_AUX" pkg="kinect_aux" type="kinect_aux_node" respawn="false" 
  output="screen"/-->

  <!-- moveit -->
  <!--include file="$(find ommp_bringup)/launch/arm/moveit.launch"/>
    <node name="set_start_arm_pos" pkg="ommp_bringup" type="set_start_pos.py" respawn="false" 
  output="screen"/-->

  


  <!-- Comment : to start Kinect driver I use docker run the following command-->
  <!--docker start kinect && docker exec kinect /bin/bash -->


  <!-- Optional laser odometry publish tf? -->
  <!--node pkg="rf2o_laser_odometry" type="rf2o_laser_odometry_node" name="rf2o_laser_odometry" output="screen">
    <rosparam file="$(find ommp_bringup)/config/rf2o_laser_odometry_params.yaml" command="load" />
  </node-->

  <!-- Optional EKF Sensor Fusion -->
  <!--node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    <rosparam file="$(find ommp_bringup)/config/ekf_localization.yaml" command="load" />
    <remap from="odometry/filtered" to="odom"/>
  </node-->

</launch>
